(function(root) {
  var SQLParser = function() {
    function require(path){ return require[path]; }
    require['./lexer'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.4.0
(function() {
  var Lexer;

  Lexer = (function() {
    var BOOLEAN, DBLSTRING, LITERAL, MATH, MATH_MULTI, NUMBER, SEPARATOR, SQL_ARRAY_OPERATORS, SQL_CONDITIONALS, SQL_FUNCTIONS, SQL_IN, SQL_KEYWORDS, SQL_OPERATORS, SQL_SORT_ORDERS, STAR, STRING, WHITESPACE;

    function Lexer(sql, opts) {
      var bytesConsumed, i;
      if (opts == null) {
        opts = {};
      }
      this.sql = sql;
      this.preserveWhitespace = opts.preserveWhitespace || false;
      this.tokens = [];
      this.currentLine = 1;
      i = 0;
      while (this.chunk = sql.slice(i)) {
        bytesConsumed = this.keywordToken() || this.starToken() || this.booleanToken() || this.functionToken() || this.windowExtension() || this.sortOrderToken() || this.seperatorToken() || this.operatorToken() || this.mathToken() || this.dotToken() || this.conditionalToken() || this.inToken() || this.arrayOperatorToken() || this.numberToken() || this.stringToken() || this.parensToken() || this.whitespaceToken() || this.literalToken();
        if (bytesConsumed < 1) {
          throw new Error("NOTHING CONSUMED: Stopped at - '" + (this.chunk.slice(0, 30)) + "'");
        }
        i += bytesConsumed;
      }
      this.token('EOF', '');
    }

    Lexer.prototype.token = function(name, value) {
      return this.tokens.push([name, value, this.currentLine]);
    };

    Lexer.prototype.tokenizeFromRegex = function(name, regex, part, lengthPart, output) {
      var match, partMatch;
      if (part == null) {
        part = 0;
      }
      if (lengthPart == null) {
        lengthPart = part;
      }
      if (output == null) {
        output = true;
      }
      if (!(match = regex.exec(this.chunk))) {
        return 0;
      }
      partMatch = match[part];
      if (output) {
        this.token(name, partMatch);
      }
      return match[lengthPart].length;
    };

    Lexer.prototype.tokenizeFromWord = function(name, word) {
      var match, matcher;
      if (word == null) {
        word = name;
      }
      word = this.regexEscape(word);
      matcher = /^\w+$/.test(word) ? new RegExp("^(" + word + ")\\b", 'ig') : new RegExp("^(" + word + ")", 'ig');
      match = matcher.exec(this.chunk);
      if (!match) {
        return 0;
      }
      this.token(name, match[1]);
      return match[1].length;
    };

    Lexer.prototype.tokenizeFromList = function(name, list) {
      var entry, ret, _i, _len;
      ret = 0;
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        entry = list[_i];
        ret = this.tokenizeFromWord(name, entry);
        if (ret > 0) {
          break;
        }
      }
      return ret;
    };

    Lexer.prototype.keywordToken = function() {
      return this.tokenizeFromWord('SELECT') || this.tokenizeFromWord('DISTINCT') || this.tokenizeFromWord('FROM') || this.tokenizeFromWord('WHERE') || this.tokenizeFromWord('GROUP') || this.tokenizeFromWord('ORDER') || this.tokenizeFromWord('BY') || this.tokenizeFromWord('HAVING') || this.tokenizeFromWord('LIMIT') || this.tokenizeFromWord('OFFSET') || this.tokenizeFromWord('JOIN') || this.tokenizeFromWord('LEFT') || this.tokenizeFromWord('RIGHT') || this.tokenizeFromWord('INNER') || this.tokenizeFromWord('OUTER') || this.tokenizeFromWord('ON') || this.tokenizeFromWord('AS') || this.tokenizeFromWord('UNION') || this.tokenizeFromWord('ALL');
    };

    Lexer.prototype.dotToken = function() {
      return this.tokenizeFromWord('DOT', '.');
    };

    Lexer.prototype.operatorToken = function() {
      return this.tokenizeFromList('OPERATOR', SQL_OPERATORS);
    };

    Lexer.prototype.mathToken = function() {
      return this.tokenizeFromList('MATH', MATH) || this.tokenizeFromList('MATH_MULTI', MATH_MULTI);
    };

    Lexer.prototype.conditionalToken = function() {
      return this.tokenizeFromList('CONDITIONAL', SQL_CONDITIONALS);
    };

    Lexer.prototype.inToken = function() {
      return this.tokenizeFromList('IN', SQL_IN);
    };

    Lexer.prototype.arrayOperatorToken = function() {
      return this.tokenizeFromList('ARRAY_OPERATOR', SQL_ARRAY_OPERATORS);
    };

    Lexer.prototype.functionToken = function() {
      return this.tokenizeFromList('FUNCTION', SQL_FUNCTIONS);
    };

    Lexer.prototype.sortOrderToken = function() {
      return this.tokenizeFromList('DIRECTION', SQL_SORT_ORDERS);
    };

    Lexer.prototype.booleanToken = function() {
      return this.tokenizeFromList('BOOLEAN', BOOLEAN);
    };

    Lexer.prototype.starToken = function() {
      return this.tokenizeFromRegex('STAR', STAR);
    };

    Lexer.prototype.seperatorToken = function() {
      return this.tokenizeFromRegex('SEPARATOR', SEPARATOR);
    };

    Lexer.prototype.literalToken = function() {
      return this.tokenizeFromRegex('LITERAL', LITERAL, 1, 0);
    };

    Lexer.prototype.numberToken = function() {
      return this.tokenizeFromRegex('NUMBER', NUMBER);
    };

    Lexer.prototype.stringToken = function() {
      return this.tokenizeFromRegex('STRING', STRING, 1, 0) || this.tokenizeFromRegex('DBLSTRING', DBLSTRING, 1, 0);
    };

    Lexer.prototype.parensToken = function() {
      return this.tokenizeFromRegex('LEFT_PAREN', /^\(/) || this.tokenizeFromRegex('RIGHT_PAREN', /^\)/);
    };

    Lexer.prototype.windowExtension = function() {
      var match;
      match = /^\.(win):(length|time)/i.exec(this.chunk);
      if (!match) {
        return 0;
      }
      this.token('WINDOW', match[1]);
      this.token('WINDOW_FUNCTION', match[2]);
      return match[0].length;
    };

    Lexer.prototype.whitespaceToken = function() {
      var match, newlines, partMatch;
      if (!(match = WHITESPACE.exec(this.chunk))) {
        return 0;
      }
      partMatch = match[0];
      newlines = partMatch.replace(/[^\n]/, '').length;
      this.currentLine += newlines;
      if (this.preserveWhitespace) {
        this.token(name, partMatch);
      }
      return partMatch.length;
    };

    Lexer.prototype.regexEscape = function(str) {
      return str.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    };

    SQL_KEYWORDS = ['SELECT', 'FROM', 'WHERE', 'GROUP BY', 'ORDER BY', 'HAVING', 'AS'];

    SQL_FUNCTIONS = ['AVG', 'COUNT', 'MIN', 'MAX', 'SUM'];

    SQL_SORT_ORDERS = ['ASC', 'DESC'];

    SQL_OPERATORS = ['=', '>=', '>', '<=', '<', '<>', '!=', 'LIKE', 'IS NOT', 'IS'];

    SQL_IN = ['IN', 'NOT IN'];

    SQL_ARRAY_OPERATORS = ['ANY', 'ALL'];

    SQL_CONDITIONALS = ['AND', 'OR'];

    BOOLEAN = ['TRUE', 'FALSE', 'NULL'];

    MATH = ['+', '-'];

    MATH_MULTI = ['/', '*'];

    STAR = /^\*/;

    SEPARATOR = /^,/;

    WHITESPACE = /^[ \n\r]+/;

    LITERAL = /^`?([a-z_][a-z0-9_]{0,})`?/i;

    NUMBER = /^[0-9]+(\.[0-9]+)?/;

    STRING = /^'([^\\']*(?:\\.[^\\']*)*)'/;

    DBLSTRING = /^"([^\\"]*(?:\\.[^\\"]*)*)"/;

    return Lexer;

  })();

  exports.tokenize = function(sql, opts) {
    return (new Lexer(sql, opts)).tokens;
  };

}).call(this);

};require['./compiled_parser'] = new function() {
  var exports = this;
  /* Jison generated parser */
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Query":4,"EOF":5,"SelectQuery":6,"Unions":7,"SelectWithLimitQuery":8,"SelectWithOffsetQuery":9,"BasicSelectQuery":10,"Select":11,"OrderClause":12,"GroupClause":13,"LimitClause":14,"OffsetClause":15,"SelectClause":16,"WhereClause":17,"SELECT":18,"Fields":19,"FROM":20,"Table":21,"DISTINCT":22,"Joins":23,"ON":24,"LEFT_PAREN":25,"RIGHT_PAREN":26,"TableReference":27,"AS":28,"Literal":29,"List":30,"WINDOW":31,"WINDOW_FUNCTION":32,"Number":33,"Union":34,"UNION":35,"ALL":36,"Join":37,"JOIN":38,"Expression":39,"LEFT":40,"RIGHT":41,"INNER":42,"OUTER":43,"WHERE":44,"LIMIT":45,"OFFSET":46,"ORDER":47,"BY":48,"OrderArgs":49,"OrderArg":50,"SEPARATOR":51,"Value":52,"DIRECTION":53,"GroupBasicClause":54,"HavingClause":55,"GROUP":56,"ArgumentList":57,"HAVING":58,"MATH":59,"MATH_MULTI":60,"OPERATOR":61,"ARRAY_OPERATOR":62,"CONDITIONAL":63,"IN":64,"String":65,"Function":66,"UserFunction":67,"Boolean":68,"NUMBER":69,"BOOLEAN":70,"STRING":71,"DBLSTRING":72,"LITERAL":73,"DOT":74,"FUNCTION":75,"Field":76,"STAR":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"SELECT",20:"FROM",22:"DISTINCT",24:"ON",25:"LEFT_PAREN",26:"RIGHT_PAREN",28:"AS",31:"WINDOW",32:"WINDOW_FUNCTION",35:"UNION",36:"ALL",38:"JOIN",40:"LEFT",41:"RIGHT",42:"INNER",43:"OUTER",44:"WHERE",45:"LIMIT",46:"OFFSET",47:"ORDER",48:"BY",51:"SEPARATOR",53:"DIRECTION",56:"GROUP",58:"HAVING",59:"MATH",60:"MATH_MULTI",61:"OPERATOR",62:"ARRAY_OPERATOR",63:"CONDITIONAL",64:"IN",69:"NUMBER",70:"BOOLEAN",71:"STRING",72:"DBLSTRING",73:"LITERAL",74:"DOT",75:"FUNCTION",77:"STAR"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,1],[10,1],[10,2],[10,2],[10,3],[8,2],[9,2],[11,1],[11,2],[16,4],[16,5],[16,5],[16,6],[16,9],[16,10],[21,1],[21,3],[27,1],[27,3],[27,3],[27,4],[27,6],[7,1],[7,2],[34,2],[34,3],[23,1],[23,2],[37,4],[37,5],[37,5],[37,5],[37,6],[37,6],[37,6],[37,6],[17,2],[14,2],[15,2],[12,3],[49,1],[49,3],[50,1],[50,2],[13,1],[13,2],[54,3],[55,2],[39,3],[39,3],[39,3],[39,3],[39,4],[39,3],[39,3],[39,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[30,1],[33,1],[68,1],[65,1],[65,1],[29,1],[29,3],[66,4],[67,4],[57,1],[57,3],[19,1],[19,3],[76,1],[76,1],[76,3]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1:return this.$ = $$[$0-1];
break;
case 2:this.$ = $$[$0];
break;
case 3:this.$ = (function () {
        $$[$0-1].unions = $$[$0];
        return $$[$0-1];
      }());
break;
case 4:this.$ = $$[$0];
break;
case 5:this.$ = $$[$0];
break;
case 6:this.$ = $$[$0];
break;
case 7:this.$ = $$[$0];
break;
case 8:this.$ = (function () {
        $$[$0-1].order = $$[$0];
        return $$[$0-1];
      }());
break;
case 9:this.$ = (function () {
        $$[$0-1].group = $$[$0];
        return $$[$0-1];
      }());
break;
case 10:this.$ = (function () {
        $$[$0-2].group = $$[$0-1];
        $$[$0-2].order = $$[$0];
        return $$[$0-2];
      }());
break;
case 11:this.$ = (function () {
        $$[$0-1].limit = $$[$0];
        return $$[$0-1];
      }());
break;
case 12:this.$ = (function () {
        $$[$0-1].offset = $$[$0];
        return $$[$0-1];
      }());
break;
case 13:this.$ = $$[$0];
break;
case 14:this.$ = (function () {
        $$[$0-1].where = $$[$0];
        return $$[$0-1];
      }());
break;
case 15:this.$ = new yy.Select($$[$0-2], $$[$0], false);
break;
case 16:this.$ = new yy.Select($$[$0-2], $$[$0], true);
break;
case 17:this.$ = new yy.Select($$[$0-3], $$[$0-1], false, $$[$0]);
break;
case 18:this.$ = new yy.Select($$[$0-3], $$[$0-1], true, $$[$0]);
break;
case 19:this.$ = new yy.Select($$[$0-2], $$[$0], $$[$0-4]);
break;
case 20:this.$ = new yy.Select($$[$0-3], $$[$0-1], $$[$0-5], $$[$0]);
break;
case 21:this.$ = new yy.Field($$[$0]);
break;
case 22:this.$ = new yy.Field($$[$0-2], $$[$0]);
break;
case 23:this.$ = new yy.Table($$[$0]);
break;
case 24:this.$ = $$[$0-1];
break;
case 25:this.$ = new yy.SubSelect($$[$0-1]);
break;
case 26:this.$ = new yy.SubSelect($$[$0-2], $$[$0]);
break;
case 27:this.$ = new yy.Table($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-1]);
break;
case 28:this.$ = [$$[$0]];
break;
case 29:this.$ = $$[$0-1].concat($$[$01]);
break;
case 30:this.$ = new yy.Union($$[$0]);
break;
case 31:this.$ = new yy.Union($$[$0], true);
break;
case 32:this.$ = [$$[$0]];
break;
case 33:this.$ = $$[$0-1].concat($$[$0]);
break;
case 34:this.$ = new yy.Join($$[$0-2], $$[$0]);
break;
case 35:this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT');
break;
case 36:this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT');
break;
case 37:this.$ = new yy.Join($$[$0-2], $$[$0], null, 'INNER');
break;
case 38:this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT', 'INNER');
break;
case 39:this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT', 'INNER');
break;
case 40:this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT', 'OUTER');
break;
case 41:this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT', 'OUTER');
break;
case 42:this.$ = new yy.Where($$[$0]);
break;
case 43:this.$ = new yy.Limit($$[$0]);
break;
case 44:this.$ = new yy.Offset($$[$0]);
break;
case 45:this.$ = new yy.Order($$[$0]);
break;
case 46:this.$ = [$$[$0]];
break;
case 47:this.$ = $$[$0-2].concat($$[$0]);
break;
case 48:this.$ = new yy.OrderArgument($$[$0], 'ASC');
break;
case 49:this.$ = new yy.OrderArgument($$[$0-1], $$[$0]);
break;
case 50:this.$ = $$[$0];
break;
case 51:this.$ = (function () {
        $$[$0-1].having = $$[$0];
        return $$[$0-1];
      }());
break;
case 52:this.$ = new yy.Group($$[$0]);
break;
case 53:this.$ = new yy.Having($$[$0]);
break;
case 54:this.$ = $$[$0-1];
break;
case 55:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 56:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 57:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 58:this.$ = new yy.Op($$[$0-2], $$[$0-3], new yy.ArrayOp($$[$0-1], $$[$0]));
break;
case 59:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 60:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 61:this.$ = $$[$0];
break;
case 62:this.$ = $$[$0];
break;
case 63:this.$ = $$[$0];
break;
case 64:this.$ = $$[$0];
break;
case 65:this.$ = $$[$0];
break;
case 66:this.$ = $$[$0];
break;
case 67:this.$ = $$[$0];
break;
case 68:this.$ = new yy.ListValue($$[$0]);
break;
case 69:this.$ = new yy.NumberValue($$[$0]);
break;
case 70:this.$ = new yy.BooleanValue($$[$0]);
break;
case 71:this.$ = new yy.StringValue($$[$0], "'");
break;
case 72:this.$ = new yy.StringValue($$[$0], '"');
break;
case 73:this.$ = new yy.LiteralValue($$[$0]);
break;
case 74:this.$ = new yy.LiteralValue($$[$0-2], $$[$0]);
break;
case 75:this.$ = new yy.FunctionValue($$[$0-3], $$[$0-1]);
break;
case 76:this.$ = new yy.FunctionValue($$[$0-3], $$[$0-1], true);
break;
case 77:this.$ = [$$[$0]];
break;
case 78:this.$ = $$[$0-2].concat($$[$0]);
break;
case 79:this.$ = [$$[$0]];
break;
case 80:this.$ = $$[$0-2].concat($$[$0]);
break;
case 81:this.$ = new yy.Star();
break;
case 82:this.$ = new yy.Field($$[$0]);
break;
case 83:this.$ = new yy.Field($$[$0-2], $$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:5,10:6,11:7,16:8,18:[1,9]},{1:[3]},{5:[1,10]},{5:[2,2],7:11,14:12,15:13,26:[2,2],34:14,35:[1,17],45:[1,15],46:[1,16]},{5:[2,4],26:[2,4],35:[2,4],45:[2,4],46:[2,4]},{5:[2,5],26:[2,5],35:[2,5],45:[2,5],46:[2,5]},{5:[2,6],26:[2,6],35:[2,6],45:[2,6],46:[2,6]},{5:[2,7],12:18,13:19,26:[2,7],35:[2,7],45:[2,7],46:[2,7],47:[1,20],54:21,56:[1,22]},{5:[2,13],17:23,26:[2,13],35:[2,13],44:[1,24],45:[2,13],46:[2,13],47:[2,13],56:[2,13]},{19:25,22:[1,26],25:[1,30],29:32,33:33,39:29,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42],76:27,77:[1,28]},{1:[2,1]},{5:[2,3],26:[2,3],34:44,35:[1,17]},{5:[2,11],26:[2,11],35:[2,11],45:[2,11],46:[2,11]},{5:[2,12],26:[2,12],35:[2,12],45:[2,12],46:[2,12]},{5:[2,28],26:[2,28],35:[2,28]},{33:45,69:[1,39]},{33:46,69:[1,39]},{6:47,8:4,9:5,10:6,11:7,16:8,18:[1,9],36:[1,48]},{5:[2,8],26:[2,8],35:[2,8],45:[2,8],46:[2,8]},{5:[2,9],12:49,26:[2,9],35:[2,9],45:[2,9],46:[2,9],47:[1,20]},{48:[1,50]},{5:[2,50],26:[2,50],35:[2,50],45:[2,50],46:[2,50],47:[2,50],55:51,58:[1,52]},{48:[1,53]},{5:[2,14],26:[2,14],35:[2,14],45:[2,14],46:[2,14],47:[2,14],56:[2,14]},{25:[1,30],29:32,33:33,39:54,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{20:[1,55],51:[1,56]},{19:57,24:[1,58],25:[1,30],29:32,33:33,39:29,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42],76:27,77:[1,28]},{20:[2,79],26:[2,79],51:[2,79]},{20:[2,81],26:[2,81],51:[2,81]},{20:[2,82],26:[2,82],28:[1,59],51:[2,82],59:[1,60],60:[1,61],61:[1,62],63:[1,63]},{25:[1,30],29:32,33:33,39:64,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{5:[2,61],20:[2,61],26:[2,61],28:[2,61],35:[2,61],38:[2,61],40:[2,61],41:[2,61],42:[2,61],44:[2,61],45:[2,61],46:[2,61],47:[2,61],51:[2,61],56:[2,61],58:[2,61],59:[2,61],60:[2,61],61:[2,61],63:[2,61],64:[1,65]},{5:[2,62],20:[2,62],26:[2,62],28:[2,62],35:[2,62],38:[2,62],40:[2,62],41:[2,62],42:[2,62],44:[2,62],45:[2,62],46:[2,62],47:[2,62],51:[2,62],53:[2,62],56:[2,62],58:[2,62],59:[2,62],60:[2,62],61:[2,62],63:[2,62],64:[2,62],74:[1,66]},{5:[2,63],20:[2,63],26:[2,63],28:[2,63],35:[2,63],38:[2,63],40:[2,63],41:[2,63],42:[2,63],44:[2,63],45:[2,63],46:[2,63],47:[2,63],51:[2,63],53:[2,63],56:[2,63],58:[2,63],59:[2,63],60:[2,63],61:[2,63],63:[2,63],64:[2,63]},{5:[2,64],20:[2,64],26:[2,64],28:[2,64],35:[2,64],38:[2,64],40:[2,64],41:[2,64],42:[2,64],44:[2,64],45:[2,64],46:[2,64],47:[2,64],51:[2,64],53:[2,64],56:[2,64],58:[2,64],59:[2,64],60:[2,64],61:[2,64],63:[2,64],64:[2,64]},{5:[2,65],20:[2,65],26:[2,65],28:[2,65],35:[2,65],38:[2,65],40:[2,65],41:[2,65],42:[2,65],44:[2,65],45:[2,65],46:[2,65],47:[2,65],51:[2,65],53:[2,65],56:[2,65],58:[2,65],59:[2,65],60:[2,65],61:[2,65],63:[2,65],64:[2,65]},{5:[2,66],20:[2,66],26:[2,66],28:[2,66],35:[2,66],38:[2,66],40:[2,66],41:[2,66],42:[2,66],44:[2,66],45:[2,66],46:[2,66],47:[2,66],51:[2,66],53:[2,66],56:[2,66],58:[2,66],59:[2,66],60:[2,66],61:[2,66],63:[2,66],64:[2,66]},{5:[2,67],20:[2,67],26:[2,67],28:[2,67],35:[2,67],38:[2,67],40:[2,67],41:[2,67],42:[2,67],44:[2,67],45:[2,67],46:[2,67],47:[2,67],51:[2,67],53:[2,67],56:[2,67],58:[2,67],59:[2,67],60:[2,67],61:[2,67],63:[2,67],64:[2,67]},{5:[2,73],20:[2,73],25:[1,67],26:[2,73],28:[2,73],35:[2,73],38:[2,73],40:[2,73],41:[2,73],42:[2,73],44:[2,73],45:[2,73],46:[2,73],47:[2,73],51:[2,73],53:[2,73],56:[2,73],58:[2,73],59:[2,73],60:[2,73],61:[2,73],63:[2,73],64:[2,73],74:[2,73]},{5:[2,69],20:[2,69],26:[2,69],28:[2,69],35:[2,69],38:[2,69],40:[2,69],41:[2,69],42:[2,69],44:[2,69],45:[2,69],46:[2,69],47:[2,69],51:[2,69],53:[2,69],56:[2,69],58:[2,69],59:[2,69],60:[2,69],61:[2,69],63:[2,69],64:[2,69]},{5:[2,71],20:[2,71],26:[2,71],28:[2,71],35:[2,71],38:[2,71],40:[2,71],41:[2,71],42:[2,71],44:[2,71],45:[2,71],46:[2,71],47:[2,71],51:[2,71],53:[2,71],56:[2,71],58:[2,71],59:[2,71],60:[2,71],61:[2,71],63:[2,71],64:[2,71]},{5:[2,72],20:[2,72],26:[2,72],28:[2,72],35:[2,72],38:[2,72],40:[2,72],41:[2,72],42:[2,72],44:[2,72],45:[2,72],46:[2,72],47:[2,72],51:[2,72],53:[2,72],56:[2,72],58:[2,72],59:[2,72],60:[2,72],61:[2,72],63:[2,72],64:[2,72]},{25:[1,68]},{5:[2,70],20:[2,70],26:[2,70],28:[2,70],35:[2,70],38:[2,70],40:[2,70],41:[2,70],42:[2,70],44:[2,70],45:[2,70],46:[2,70],47:[2,70],51:[2,70],53:[2,70],56:[2,70],58:[2,70],59:[2,70],60:[2,70],61:[2,70],63:[2,70],64:[2,70]},{5:[2,29],26:[2,29],35:[2,29]},{5:[2,43],26:[2,43],35:[2,43],45:[2,43],46:[2,43]},{5:[2,44],26:[2,44],35:[2,44],45:[2,44],46:[2,44]},{5:[2,30],14:12,15:13,26:[2,30],35:[2,30],45:[1,15],46:[1,16]},{6:69,8:4,9:5,10:6,11:7,16:8,18:[1,9]},{5:[2,10],26:[2,10],35:[2,10],45:[2,10],46:[2,10]},{29:32,33:33,49:70,50:71,52:72,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{5:[2,51],26:[2,51],35:[2,51],45:[2,51],46:[2,51],47:[2,51]},{25:[1,30],29:32,33:33,39:73,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{25:[1,30],29:32,33:33,39:75,52:31,57:74,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{5:[2,42],26:[2,42],35:[2,42],45:[2,42],46:[2,42],47:[2,42],56:[2,42],59:[1,60],60:[1,61],61:[1,62],63:[1,63]},{21:76,25:[1,79],27:77,29:78,73:[1,80]},{25:[1,30],29:32,33:33,39:29,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42],76:81,77:[1,28]},{20:[1,82],51:[1,56]},{25:[1,83]},{29:84,73:[1,80]},{25:[1,30],29:32,33:33,39:85,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{25:[1,30],29:32,33:33,39:86,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{25:[1,30],29:32,33:33,39:87,52:31,62:[1,88],65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{25:[1,30],29:32,33:33,39:89,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{26:[1,90],59:[1,60],60:[1,61],61:[1,62],63:[1,63]},{21:91,25:[1,79],27:77,29:78,73:[1,80]},{73:[1,92]},{25:[1,30],29:32,33:33,39:75,52:31,57:93,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{25:[1,30],29:32,33:33,39:75,52:31,57:94,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{5:[2,31],14:12,15:13,26:[2,31],35:[2,31],45:[1,15],46:[1,16]},{5:[2,45],26:[2,45],35:[2,45],45:[2,45],46:[2,45],51:[1,95]},{5:[2,46],26:[2,46],35:[2,46],45:[2,46],46:[2,46],51:[2,46]},{5:[2,48],26:[2,48],35:[2,48],45:[2,48],46:[2,48],51:[2,48],53:[1,96]},{5:[2,53],26:[2,53],35:[2,53],45:[2,53],46:[2,53],47:[2,53],59:[1,60],60:[1,61],61:[1,62],63:[1,63]},{5:[2,52],26:[2,52],35:[2,52],45:[2,52],46:[2,52],47:[2,52],51:[1,97],58:[2,52]},{5:[2,77],26:[2,77],35:[2,77],45:[2,77],46:[2,77],47:[2,77],51:[2,77],58:[2,77],59:[1,60],60:[1,61],61:[1,62],63:[1,63]},{5:[2,15],23:98,26:[2,15],35:[2,15],37:99,38:[1,100],40:[1,101],41:[1,102],42:[1,103],44:[2,15],45:[2,15],46:[2,15],47:[2,15],56:[2,15]},{5:[2,21],20:[2,21],24:[2,21],26:[2,21],28:[1,104],35:[2,21],38:[2,21],40:[2,21],41:[2,21],42:[2,21],44:[2,21],45:[2,21],46:[2,21],47:[2,21],51:[2,21],56:[2,21],58:[2,21],59:[2,21],60:[2,21],61:[2,21],63:[2,21]},{5:[2,23],20:[2,23],24:[2,23],26:[2,23],28:[2,23],31:[1,105],35:[2,23],38:[2,23],40:[2,23],41:[2,23],42:[2,23],44:[2,23],45:[2,23],46:[2,23],47:[2,23],51:[2,23],56:[2,23],58:[2,23],59:[2,23],60:[2,23],61:[2,23],63:[2,23],74:[1,66]},{4:107,6:3,8:4,9:5,10:6,11:7,16:8,18:[1,9],25:[1,30],29:32,30:106,33:33,39:75,52:31,57:108,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{5:[2,73],20:[2,73],24:[2,73],26:[2,73],28:[2,73],31:[2,73],35:[2,73],38:[2,73],40:[2,73],41:[2,73],42:[2,73],44:[2,73],45:[2,73],46:[2,73],47:[2,73],51:[2,73],56:[2,73],58:[2,73],59:[2,73],60:[2,73],61:[2,73],63:[2,73],74:[2,73]},{20:[2,80],26:[2,80],51:[2,80]},{21:109,25:[1,79],27:77,29:78,73:[1,80]},{19:110,25:[1,30],29:32,33:33,39:29,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42],76:27,77:[1,28]},{20:[2,83],26:[2,83],51:[2,83],74:[1,66]},{5:[2,55],20:[2,55],26:[2,55],28:[2,55],35:[2,55],38:[2,55],40:[2,55],41:[2,55],42:[2,55],44:[2,55],45:[2,55],46:[2,55],47:[2,55],51:[2,55],56:[2,55],58:[2,55],59:[2,55],60:[1,61],61:[2,55],63:[2,55]},{5:[2,56],20:[2,56],26:[2,56],28:[2,56],35:[2,56],38:[2,56],40:[2,56],41:[2,56],42:[2,56],44:[2,56],45:[2,56],46:[2,56],47:[2,56],51:[2,56],56:[2,56],58:[2,56],59:[2,56],60:[2,56],61:[2,56],63:[2,56]},{5:[2,57],20:[2,57],26:[2,57],28:[2,57],35:[2,57],38:[2,57],40:[2,57],41:[2,57],42:[2,57],44:[2,57],45:[2,57],46:[2,57],47:[2,57],51:[2,57],56:[2,57],58:[2,57],59:[1,60],60:[1,61],61:[2,57],63:[2,57]},{25:[1,30],29:32,33:33,39:111,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{5:[2,59],20:[2,59],26:[2,59],28:[2,59],35:[2,59],38:[2,59],40:[2,59],41:[2,59],42:[2,59],44:[2,59],45:[2,59],46:[2,59],47:[2,59],51:[2,59],56:[2,59],58:[2,59],59:[1,60],60:[1,61],61:[1,62],63:[2,59]},{5:[2,54],20:[2,54],26:[2,54],28:[2,54],35:[2,54],38:[2,54],40:[2,54],41:[2,54],42:[2,54],44:[2,54],45:[2,54],46:[2,54],47:[2,54],51:[2,54],56:[2,54],58:[2,54],59:[2,54],60:[2,54],61:[2,54],63:[2,54]},{5:[2,60],20:[2,60],26:[2,60],28:[2,60],35:[2,60],38:[2,60],40:[2,60],41:[2,60],42:[2,60],44:[2,60],45:[2,60],46:[2,60],47:[2,60],51:[2,60],56:[2,60],58:[2,60],59:[2,60],60:[2,60],61:[2,60],63:[2,60]},{5:[2,74],20:[2,74],24:[2,74],26:[2,74],28:[2,74],31:[2,74],35:[2,74],38:[2,74],40:[2,74],41:[2,74],42:[2,74],44:[2,74],45:[2,74],46:[2,74],47:[2,74],51:[2,74],53:[2,74],56:[2,74],58:[2,74],59:[2,74],60:[2,74],61:[2,74],63:[2,74],64:[2,74],74:[2,74]},{26:[1,112],51:[1,97]},{26:[1,113],51:[1,97]},{29:32,33:33,50:114,52:72,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{5:[2,49],26:[2,49],35:[2,49],45:[2,49],46:[2,49],51:[2,49]},{29:32,33:33,52:115,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{5:[2,17],26:[2,17],35:[2,17],37:116,38:[1,100],40:[1,101],41:[1,102],42:[1,103],44:[2,17],45:[2,17],46:[2,17],47:[2,17],56:[2,17]},{5:[2,32],26:[2,32],35:[2,32],38:[2,32],40:[2,32],41:[2,32],42:[2,32],44:[2,32],45:[2,32],46:[2,32],47:[2,32],56:[2,32]},{21:117,25:[1,79],27:77,29:78,73:[1,80]},{38:[1,118],42:[1,119],43:[1,120]},{38:[1,121],42:[1,122],43:[1,123]},{38:[1,124]},{29:125,73:[1,80]},{32:[1,126]},{26:[1,127]},{26:[1,128]},{26:[2,68],51:[1,97]},{5:[2,16],23:129,26:[2,16],35:[2,16],37:99,38:[1,100],40:[1,101],41:[1,102],42:[1,103],44:[2,16],45:[2,16],46:[2,16],47:[2,16],56:[2,16]},{26:[1,130],51:[1,56]},{5:[2,58],20:[2,58],26:[2,58],28:[2,58],35:[2,58],38:[2,58],40:[2,58],41:[2,58],42:[2,58],44:[2,58],45:[2,58],46:[2,58],47:[2,58],51:[2,58],56:[2,58],58:[2,58],59:[1,60],60:[1,61],61:[2,58],63:[2,58]},{5:[2,76],20:[2,76],26:[2,76],28:[2,76],35:[2,76],38:[2,76],40:[2,76],41:[2,76],42:[2,76],44:[2,76],45:[2,76],46:[2,76],47:[2,76],51:[2,76],53:[2,76],56:[2,76],58:[2,76],59:[2,76],60:[2,76],61:[2,76],63:[2,76],64:[2,76]},{5:[2,75],20:[2,75],26:[2,75],28:[2,75],35:[2,75],38:[2,75],40:[2,75],41:[2,75],42:[2,75],44:[2,75],45:[2,75],46:[2,75],47:[2,75],51:[2,75],53:[2,75],56:[2,75],58:[2,75],59:[2,75],60:[2,75],61:[2,75],63:[2,75],64:[2,75]},{5:[2,47],26:[2,47],35:[2,47],45:[2,47],46:[2,47],51:[2,47]},{5:[2,78],26:[2,78],35:[2,78],45:[2,78],46:[2,78],47:[2,78],51:[2,78],58:[2,78]},{5:[2,33],26:[2,33],35:[2,33],38:[2,33],40:[2,33],41:[2,33],42:[2,33],44:[2,33],45:[2,33],46:[2,33],47:[2,33],56:[2,33]},{24:[1,131]},{21:132,25:[1,79],27:77,29:78,73:[1,80]},{38:[1,133]},{38:[1,134]},{21:135,25:[1,79],27:77,29:78,73:[1,80]},{38:[1,136]},{38:[1,137]},{21:138,25:[1,79],27:77,29:78,73:[1,80]},{5:[2,22],20:[2,22],24:[2,22],26:[2,22],28:[2,22],35:[2,22],38:[2,22],40:[2,22],41:[2,22],42:[2,22],44:[2,22],45:[2,22],46:[2,22],47:[2,22],51:[2,22],56:[2,22],58:[2,22],59:[2,22],60:[2,22],61:[2,22],63:[2,22],74:[1,66]},{25:[1,139]},{5:[2,24],20:[2,24],24:[2,24],26:[2,24],28:[2,24],35:[2,24],38:[2,24],40:[2,24],41:[2,24],42:[2,24],44:[2,24],45:[2,24],46:[2,24],47:[2,24],51:[2,24],56:[2,24],58:[2,24],59:[2,24],60:[2,24],61:[2,24],63:[2,24]},{5:[2,25],20:[2,25],24:[2,25],26:[2,25],28:[2,25],29:140,35:[2,25],38:[2,25],40:[2,25],41:[2,25],42:[2,25],44:[2,25],45:[2,25],46:[2,25],47:[2,25],51:[2,25],56:[2,25],58:[2,25],59:[2,25],60:[2,25],61:[2,25],63:[2,25],73:[1,80]},{5:[2,18],26:[2,18],35:[2,18],37:116,38:[1,100],40:[1,101],41:[1,102],42:[1,103],44:[2,18],45:[2,18],46:[2,18],47:[2,18],56:[2,18]},{19:141,25:[1,30],29:32,33:33,39:29,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42],76:27,77:[1,28]},{25:[1,30],29:32,33:33,39:142,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{24:[1,143]},{21:144,25:[1,79],27:77,29:78,73:[1,80]},{21:145,25:[1,79],27:77,29:78,73:[1,80]},{24:[1,146]},{21:147,25:[1,79],27:77,29:78,73:[1,80]},{21:148,25:[1,79],27:77,29:78,73:[1,80]},{24:[1,149]},{33:150,69:[1,39]},{5:[2,26],20:[2,26],24:[2,26],26:[2,26],28:[2,26],35:[2,26],38:[2,26],40:[2,26],41:[2,26],42:[2,26],44:[2,26],45:[2,26],46:[2,26],47:[2,26],51:[2,26],56:[2,26],58:[2,26],59:[2,26],60:[2,26],61:[2,26],63:[2,26],74:[1,66]},{20:[1,151],51:[1,56]},{5:[2,34],26:[2,34],35:[2,34],38:[2,34],40:[2,34],41:[2,34],42:[2,34],44:[2,34],45:[2,34],46:[2,34],47:[2,34],56:[2,34],59:[1,60],60:[1,61],61:[1,62],63:[1,63]},{25:[1,30],29:32,33:33,39:152,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{24:[1,153]},{24:[1,154]},{25:[1,30],29:32,33:33,39:155,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{24:[1,156]},{24:[1,157]},{25:[1,30],29:32,33:33,39:158,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{26:[1,159]},{21:160,25:[1,79],27:77,29:78,73:[1,80]},{5:[2,35],26:[2,35],35:[2,35],38:[2,35],40:[2,35],41:[2,35],42:[2,35],44:[2,35],45:[2,35],46:[2,35],47:[2,35],56:[2,35],59:[1,60],60:[1,61],61:[1,62],63:[1,63]},{25:[1,30],29:32,33:33,39:161,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{25:[1,30],29:32,33:33,39:162,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{5:[2,36],26:[2,36],35:[2,36],38:[2,36],40:[2,36],41:[2,36],42:[2,36],44:[2,36],45:[2,36],46:[2,36],47:[2,36],56:[2,36],59:[1,60],60:[1,61],61:[1,62],63:[1,63]},{25:[1,30],29:32,33:33,39:163,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{25:[1,30],29:32,33:33,39:164,52:31,65:34,66:35,67:36,68:37,69:[1,39],70:[1,43],71:[1,40],72:[1,41],73:[1,38],75:[1,42]},{5:[2,37],26:[2,37],35:[2,37],38:[2,37],40:[2,37],41:[2,37],42:[2,37],44:[2,37],45:[2,37],46:[2,37],47:[2,37],56:[2,37],59:[1,60],60:[1,61],61:[1,62],63:[1,63]},{5:[2,27],20:[2,27],24:[2,27],26:[2,27],28:[2,27],35:[2,27],38:[2,27],40:[2,27],41:[2,27],42:[2,27],44:[2,27],45:[2,27],46:[2,27],47:[2,27],51:[2,27],56:[2,27],58:[2,27],59:[2,27],60:[2,27],61:[2,27],63:[2,27]},{5:[2,19],23:165,26:[2,19],35:[2,19],37:99,38:[1,100],40:[1,101],41:[1,102],42:[1,103],44:[2,19],45:[2,19],46:[2,19],47:[2,19],56:[2,19]},{5:[2,38],26:[2,38],35:[2,38],38:[2,38],40:[2,38],41:[2,38],42:[2,38],44:[2,38],45:[2,38],46:[2,38],47:[2,38],56:[2,38],59:[1,60],60:[1,61],61:[1,62],63:[1,63]},{5:[2,40],26:[2,40],35:[2,40],38:[2,40],40:[2,40],41:[2,40],42:[2,40],44:[2,40],45:[2,40],46:[2,40],47:[2,40],56:[2,40],59:[1,60],60:[1,61],61:[1,62],63:[1,63]},{5:[2,39],26:[2,39],35:[2,39],38:[2,39],40:[2,39],41:[2,39],42:[2,39],44:[2,39],45:[2,39],46:[2,39],47:[2,39],56:[2,39],59:[1,60],60:[1,61],61:[1,62],63:[1,63]},{5:[2,41],26:[2,41],35:[2,41],38:[2,41],40:[2,41],41:[2,41],42:[2,41],44:[2,41],45:[2,41],46:[2,41],47:[2,41],56:[2,41],59:[1,60],60:[1,61],61:[1,62],63:[1,63]},{5:[2,20],26:[2,20],35:[2,20],37:116,38:[1,100],40:[1,101],41:[1,102],42:[1,103],44:[2,20],45:[2,20],46:[2,20],47:[2,20],56:[2,20]}],
defaultActions: {10:[2,1]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
undefined
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); }
exports.main = function commonjsMain(args) {
    if (!args[1])
        throw new Error('Usage: '+args[0]+' FILE');
    var source, cwd;
    if (typeof process !== 'undefined') {
        source = require('fs').readFileSync(require('path').resolve(args[1]), "utf8");
    } else {
        source = require("file").path(require("file").cwd()).join(args[1]).read({charset: "utf-8"});
    }
    return exports.parser.parse(source);
}
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require("system").args);
}
}
};require['./nodes'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.4.0
(function() {
  var ArrayOp, Field, FunctionValue, Group, Having, Join, Limit, ListValue, LiteralValue, Offset, Op, Order, OrderArgument, Select, Star, StringValue, SubSelect, Table, Union, Where, indent;

  indent = function(str) {
    var line;
    return ((function() {
      var _i, _len, _ref, _results;
      _ref = str.split("\n");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        _results.push("  " + line);
      }
      return _results;
    })()).join("\n");
  };

  exports.Select = Select = (function() {

    function Select(fields, source, distinct, joins, unions) {
      this.fields = fields;
      this.source = source;
      this.distinct = distinct != null ? distinct : false;
      this.joins = joins != null ? joins : [];
      this.unions = unions != null ? unions : [];
      this.order = null;
      this.group = null;
      this.where = null;
      this.limit = null;
      this.offset = null;
    }

    Select.prototype.toString = function() {
      var join, ret, select, union, _i, _j, _len, _len1, _ref, _ref1;
      select = ["SELECT"];
      if (this.distinct === true) {
        select.push("DISTINCT");
      } else if (this.distinct) {
        select.push("DISTINCT ON (" + (this.distinct.join(', ')) + ")");
      }
      ret = ["" + (select.join(' ')) + " " + (this.fields.join(', '))];
      ret.push(indent("FROM " + this.source));
      _ref = this.joins;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        join = _ref[_i];
        ret.push(indent(join.toString()));
      }
      if (this.where) {
        ret.push(indent(this.where.toString()));
      }
      if (this.group) {
        ret.push(indent(this.group.toString()));
      }
      if (this.order) {
        ret.push(indent(this.order.toString()));
      }
      if (this.limit) {
        ret.push(indent(this.limit.toString()));
      }
      if (this.offset) {
        ret.push(indent(this.offset.toString()));
      }
      _ref1 = this.unions;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        union = _ref1[_j];
        ret.push(union.toString());
      }
      return ret.join("\n");
    };

    return Select;

  })();

  exports.SubSelect = SubSelect = (function() {

    function SubSelect(select, name) {
      this.select = select;
      this.name = name != null ? name : null;
      null;
    }

    SubSelect.prototype.toString = function() {
      var ret;
      ret = [];
      ret.push('(');
      ret.push(indent(this.select.toString()));
      ret.push(this.name ? ") " + (this.name.toString()) : ")");
      return ret.join("\n");
    };

    return SubSelect;

  })();

  exports.Join = Join = (function() {

    function Join(right, conditions, side, mode) {
      this.right = right;
      this.conditions = conditions != null ? conditions : null;
      this.side = side != null ? side : null;
      this.mode = mode != null ? mode : null;
      null;
    }

    Join.prototype.toString = function() {
      var ret;
      ret = '';
      if (this.side != null) {
        ret += "" + this.side + " ";
      }
      if (this.mode != null) {
        ret += "" + this.mode + " ";
      }
      return ret + ("JOIN " + this.right + "\n") + indent("ON " + this.conditions);
    };

    return Join;

  })();

  exports.Union = Union = (function() {

    function Union(query, all) {
      this.query = query;
      this.all = all != null ? all : false;
      null;
    }

    Union.prototype.toString = function() {
      var all;
      all = this.all ? ' ALL' : '';
      return "UNION" + all + "\n" + (this.query.toString());
    };

    return Union;

  })();

  exports.LiteralValue = LiteralValue = (function() {

    function LiteralValue(value, value2) {
      this.value = value;
      this.value2 = value2 != null ? value2 : null;
      if (this.value2) {
        this.nested = true;
        this.values = this.value.values;
        this.values.push(value2);
      } else {
        this.nested = false;
        this.values = [this.value];
      }
    }

    LiteralValue.prototype.toString = function() {
      return "" + (this.values.join('.'));
    };

    return LiteralValue;

  })();

  exports.StringValue = StringValue = (function() {

    function StringValue(value, quoteType) {
      this.value = value;
      this.quoteType = quoteType != null ? quoteType : "''";
      null;
    }

    StringValue.prototype.toString = function() {
      return "" + this.quoteType + this.value + this.quoteType;
    };

    return StringValue;

  })();

  exports.NumberValue = LiteralValue = (function() {

    function LiteralValue(value) {
      this.value = Number(value);
    }

    LiteralValue.prototype.toString = function() {
      return this.value.toString();
    };

    return LiteralValue;

  })();

  exports.ListValue = ListValue = (function() {

    function ListValue(value) {
      this.value = value;
    }

    ListValue.prototype.toString = function() {
      return "(" + (this.value.join(', ')) + ")";
    };

    return ListValue;

  })();

  exports.BooleanValue = LiteralValue = (function() {

    function LiteralValue(value) {
      this.value = (function() {
        switch (value.toLowerCase()) {
          case 'true':
            return true;
          case 'false':
            return false;
          default:
            return null;
        }
      })();
    }

    LiteralValue.prototype.toString = function() {
      if (this.value != null) {
        return this.value.toString().toUpperCase();
      } else {
        return 'NULL';
      }
    };

    return LiteralValue;

  })();

  exports.FunctionValue = FunctionValue = (function() {

    function FunctionValue(name, _arguments, udf) {
      this.name = name;
      this["arguments"] = _arguments != null ? _arguments : [];
      this.udf = udf != null ? udf : false;
      null;
    }

    FunctionValue.prototype.toString = function() {
      return "" + this.name + "(" + (this["arguments"].join(', ')) + ")";
    };

    return FunctionValue;

  })();

  exports.Order = Order = (function() {

    function Order(orderings) {
      this.orderings = orderings;
    }

    Order.prototype.toString = function() {
      return "ORDER BY " + (this.orderings.join(', '));
    };

    return Order;

  })();

  exports.OrderArgument = OrderArgument = (function() {

    function OrderArgument(value, direction) {
      this.value = value;
      this.direction = direction != null ? direction : 'ASC';
      null;
    }

    OrderArgument.prototype.toString = function() {
      return "" + this.value + " " + this.direction;
    };

    return OrderArgument;

  })();

  exports.Limit = Limit = (function() {

    function Limit(value) {
      this.value = value;
      null;
    }

    Limit.prototype.toString = function() {
      return "LIMIT " + this.value;
    };

    return Limit;

  })();

  exports.Offset = Offset = (function() {

    function Offset(value) {
      this.value = value;
      null;
    }

    Offset.prototype.toString = function() {
      return "OFFSET " + this.value;
    };

    return Offset;

  })();

  exports.Table = Table = (function() {

    function Table(name, win, winFn, winArg) {
      this.name = name;
      this.win = win != null ? win : null;
      this.winFn = winFn != null ? winFn : null;
      this.winArg = winArg != null ? winArg : null;
      null;
    }

    Table.prototype.toString = function() {
      if (this.win) {
        return "" + this.name + "." + this.win + ":" + this.winFn + "(" + this.winArg + ")";
      } else {
        return this.name.toString();
      }
    };

    return Table;

  })();

  exports.Group = Group = (function() {

    function Group(fields) {
      this.fields = fields;
      this.having = null;
    }

    Group.prototype.toString = function() {
      var ret;
      ret = ["GROUP BY " + (this.fields.join(', '))];
      if (this.having) {
        ret.push(this.having.toString());
      }
      return ret.join("\n");
    };

    return Group;

  })();

  exports.Where = Where = (function() {

    function Where(conditions) {
      this.conditions = conditions;
      null;
    }

    Where.prototype.toString = function() {
      return "WHERE " + this.conditions;
    };

    return Where;

  })();

  exports.Having = Having = (function() {

    function Having(conditions) {
      this.conditions = conditions;
      null;
    }

    Having.prototype.toString = function() {
      return "HAVING " + this.conditions;
    };

    return Having;

  })();

  exports.Op = Op = (function() {

    function Op(operation, left, right) {
      this.operation = operation;
      this.left = left;
      this.right = right;
      null;
    }

    Op.prototype.toString = function() {
      return "(" + this.left + " " + (this.operation.toUpperCase()) + " " + this.right + ")";
    };

    return Op;

  })();

  exports.ArrayOp = ArrayOp = (function() {

    function ArrayOp(operation, right) {
      this.operation = operation;
      this.right = right;
      null;
    }

    ArrayOp.prototype.toString = function() {
      return "" + (this.operation.toUpperCase()) + " (" + this.right + ")";
    };

    return ArrayOp;

  })();

  exports.Field = Field = (function() {

    function Field(field, name) {
      this.field = field;
      this.name = name != null ? name : null;
      null;
    }

    Field.prototype.toString = function() {
      if (this.name) {
        return "" + this.field + " AS " + this.name;
      } else {
        return this.field.toString();
      }
    };

    return Field;

  })();

  exports.Star = Star = (function() {

    function Star() {
      null;
    }

    Star.prototype.toString = function() {
      return '*';
    };

    Star.prototype.star = true;

    return Star;

  })();

}).call(this);

};require['./parser'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.4.0
(function() {
  var buildParser;

  buildParser = function() {
    var parser;
    parser = require('./compiled_parser').parser;
    parser.lexer = {
      lex: function() {
        var tag, _ref;
        _ref = this.tokens[this.pos++] || [''], tag = _ref[0], this.yytext = _ref[1], this.yylineno = _ref[2];
        return tag;
      },
      setInput: function(tokens) {
        this.tokens = tokens;
        return this.pos = 0;
      },
      upcomingInput: function() {
        return "";
      }
    };
    parser.yy = require('./nodes');
    return parser;
  };

  exports.parser = buildParser();

  exports.parse = function(str) {
    return buildParser().parse(str);
  };

}).call(this);

};require['./sql_parser'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.4.0
(function() {

  exports.lexer = require('./lexer');

  exports.parser = require('./parser');

  exports.nodes = require('./nodes');

  exports.parse = function(sql) {
    return exports.parser.parse(exports.lexer.tokenize(sql));
  };

}).call(this);

};
    return require['./sql_parser']
  }();

  if(typeof define === 'function' && define.amd) {
    define(function() { return SQLParser });
  } else { root.SQLParser = SQLParser }
}(this));